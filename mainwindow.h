/* This is the header file.
*/
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

// Our `mainwindow` object inherits from Qt's QMainWindow class.
#include <QMainWindow>
#include <QVector>

#include "task.h"

namespace Ui {
class MainWindow;
}

// As our class inherits from the `QMainWindow` class, on top of the
// header file, we add the corresponding include.
class MainWindow : public QMainWindow
{
    // MAINWINDOW_H
    // The Q_OBJECT can look a little strange to a **non-Qt** developer.
    // This macro allows the class to define its own signals/slots and
    // more globally Qt's meta-object system.
    Q_OBJECT

public:
    // This class defines a public constructor and destructor.
    // The later is pretty common. But the constructor takes a parameter
    // parent. This parameter is a QWidget pointer that is `null` by default.
    // - A QWidget is a UI component.
    //      - It can be a label, a textbox, a button, and so on.
    // If you define a parent-child relationship between your window, layout,
    // and other UI widgets, memory management of your application will be easier.
    // Indeed, in this case, deleting the parent is enough because its destructor
    // will take care of also deleting its child, which in turn will delete its children
    // and so on.
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();

public slots:
    // [Signal&Slot] Qt uses a specific `slot` keyword to identify slots.
    // Since a slot is a function, you can always adjust the visibility
    // (`public`, `protected` or `private`) depending on your needs.
    void addTask();
    // After declare the `addTask` slot in header file. We will add this slot implementation
    // in the `mainwindow.cpp` file

private:
    // The second part is the `forward declaration` of the `Ui::MainWindow`,
    // as we only declare a pointer.
    // We have a UI member variable in the private fields. The type is a pointer of
    // `Ui::MainWindow`, which is defined in the `ui_mainwindow.ui` file generated by Qt.
    // It's the C++ transcription of the UI design file `MainWindow.ui`.
    // The UI member variable will allow you to interact with your UI components
    // (QLabel, QPushButton, and so on) from C++.
    Ui::MainWindow *ui;
    // C++ tips:
    // If your class only uses `pointers` or references for a class type,
    // you can avoid including the header by using `forward declaration`.
    // That will drastically reduce compilation time.

    // The `QVector` is the Qt container class providing a dynamic array, which is an equivalent
    // of the `std::vector`.
    // As a general rule, STL containers are more customizable but might miss some features
    // compared to Qt containers.
    // If you are use C++11 smart pointers, you should favor `std` containers.
    // The already added slot `addTask()` will now be called each time we want to add a new `Task`
    // object to the `mTasks` function.
    QVector<Task*> mTasks;
};

#endif // MAINWINDOW_H
